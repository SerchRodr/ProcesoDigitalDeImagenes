/*
 * UNAM, Facultad de Ciencias
 * Proceso Digital de Imágenes
 * Alumno: Rodríguez Romero Sergio Alfonso
 * No. de Cuenta: 314187785
 * Correo: sergiorodriguez@ciencias.unam.mx
 */
package procesodeimagenes;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.Font;
import java.awt.Graphics2D;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.ArrayList;
import javafx.embed.swing.SwingFXUtils;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;

/**
 *
 * @author Rodríguez Romero Sergio Alfonso
 */
public class abrirImagen extends javax.swing.JFrame {

    /**
     * Creates new form abrirImagen
     */
    public abrirImagen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Filltros Proceso Digital De Imágenes");

        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Seleccionar Imagen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tonos de Grises 1", "Tonos de Grises 2", "Tonos de Grises 3", "Tonos de Grises 4", "Tonos de Grises 5", "Azar", "Rojo", "Verde", "Azul", "Inverso", "Alto Contraste", "Blur", "Motion Blur", "Encontrar Bordes", "Sharpen", "Emboss", "Promedio y Mediano", "Mosaico", "MColor", "MBlancoNegro", "LetrasColor", "LetrasBlancoNegro", "TextoImagen", "MarcaAgua", "QuitarMarcaAgua", "Reduccion", "ReduccionMosaico", "OleoTonosGrises", "OleoColor", "Histograma", "Sepia" }));
        jComboBox1.setMaximumRowCount(10);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton2.setText("Guardar Imagen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Esteganografía Encriptar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Esteganografía Desencriptar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Fotomosaico");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Image imagen = this.abrir();
        if(imagen != null){
            jLabel1.setIcon(new ImageIcon(imagen.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_AREA_AVERAGING)));
            jLabel2.setIcon(new ImageIcon(imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING)));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String filtro = (String) jComboBox1.getSelectedItem();
        Image imagen = null;
        switch(filtro){
            case "Tonos de Grises 1":
                imagen = grises1();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Tonos de Grises 2":
                imagen = grises2();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Tonos de Grises 3":
                imagen = grises3();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Tonos de Grises 4":
                imagen = grises4();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Tonos de Grises 5":
                imagen = grises5();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Azar":
                imagen = azar();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Rojo":
                imagen = rojo();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Verde":
                imagen = verde();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;  
            case "Azul":
                imagen = azul();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Alto Contraste":
                imagen = altoContraste();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;  
            case "Inverso":
                imagen = inverso();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Blur":
                imagen = blur();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Motion Blur":
                imagen = motionBlur();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Encontrar Bordes":
                imagen = bordes();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Sharpen":
                imagen = sharpen();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Emboss":
                imagen = emboss();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Promedio y Mediano":
                imagen = meanMedian();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Mosaico":
                imagen = mosaico(4,4);
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "MColor":
                imagen = mColores();
                JOptionPane.showMessageDialog(this, "Se ha creado el archivo en el directorio del proyecto.");
                break;
            case "MBlancoNegro":
                imagen = mBlancoNegro();
                JOptionPane.showMessageDialog(this, "Se ha creado el archivo en el directorio del proyecto.");
                break;
            case "LetrasColor":
                imagen = letrasColores();
                JOptionPane.showMessageDialog(this, "Se ha creado el archivo en el directorio del proyecto.");
                break;
            case "LetrasBlancoNegro":
                imagen = letrasBlancoNegro();
                JOptionPane.showMessageDialog(this, "Se ha creado el archivo en el directorio del proyecto.");
                break;
            case "TextoImagen":
                imagen = textoImagen();
                JOptionPane.showMessageDialog(this, "Se ha creado el archivo en el directorio del proyecto.");
                break;
            case "MarcaAgua":
                imagen = marcaAgua();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "QuitarMarcaAgua":
                imagen = quitarMarcaAgua();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Reduccion":
                imagen = reduccion();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "ReduccionMosaico":
                imagen = reduccionMosaico();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "OleoTonosGrises":
                imagen = oleoTonosGrises();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "OleoColor":
                imagen = oleo();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Histograma":
                imagen = histograma();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
            case "Sepia":
                imagen = sepia();
                jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
                break;
        }
        imagenModificada = (BufferedImage)imagen;
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.guardar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(imagenActual == null){
            JOptionPane.showMessageDialog(this, "Primero debe abrir una imágen para esconder el mensaje.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else{
            Esteganografia oculto = new Esteganografia(imagenActual);
            int w = imagenActual.getWidth();
            int h = imagenActual.getHeight();
            String mensaje = pedirMensaje(w, h);
            Image imagen = SwingFXUtils.fromFXImage(oculto.encripta(mensaje), null);
            imagenModificada = (BufferedImage)imagen;
            jLabel2.setIcon(new ImageIcon((imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_AREA_AVERAGING))));
            JOptionPane.showMessageDialog(this, "Mensaje encriptado correctamente.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if(imagenActual == null){
            JOptionPane.showMessageDialog(this, "Primero debe abrir una imágen y esconder el mensaje.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else{
            Esteganografia oculto = new Esteganografia(imagenModificada);
            String mensaje = oculto.descifra();
            JOptionPane.showMessageDialog(this, "El menasje oculto es:\n"
                    + mensaje);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if(imagenActual == null){
            JOptionPane.showMessageDialog(this, "Primero debe abrir una imágen para crear el Fotomosaico.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else{
            int eleccion = opcionesBiblioteca();
            JFileChooser fichero = new JFileChooser();
            switch(eleccion){
                case 1:
                    fichero.setDialogTitle("Seleccionar Carpeta");
                    fichero.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    if(fichero.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                        try{
                            JOptionPane.showMessageDialog(this, "Puede que calcular la biblioteca de imágenes demore unos minutos.\n"
                            + "Se le notificará cuando se haya terminado de crear la biblioteca.\n Por favor espere un momento.", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                            String distancia = distanciaImagenes();
                            File dir = fichero.getSelectedFile();
                            Fotomosaico fotoMosaico = new Fotomosaico(dir, false, imagenModificada);
                            fotoMosaico.sacaMosaico(distancia);
                        } catch (IOException e){}
                    }
                    break;
                case 2: 
                    fichero.setDialogTitle("Seleccionar Bilioteca");
                    FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("Biblioteca *.txt", "txt");
                    fichero.setFileFilter(filtroImagen);
                    if(fichero.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                        try{
                            String distancia = distanciaImagenes();
                            File dir = fichero.getSelectedFile();
                            Fotomosaico fotoMosaico = new Fotomosaico(dir, true, imagenModificada);
                            fotoMosaico.sacaMosaico(distancia);
                        } catch (IOException e){}
                    }
                    break;
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(abrirImagen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(abrirImagen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(abrirImagen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(abrirImagen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new abrirImagen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    private BufferedImage imagenActual;
    private BufferedImage imagenModificada;
    
    //Método que abre la imágen a procesar.
    private BufferedImage abrir(){
        BufferedImage img = null;
        JFileChooser selector = new JFileChooser();
        selector.setDialogTitle("Seleccionar Imagen");
        String texto = "Seleccionar Imagen (*.jpg), (*.jpeg), (*.png), (*.bmp)";
        FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter(texto, "jpg", "jpeg", "png", "bmp");
        selector.setFileFilter(filtroImagen);
        if(selector.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            try{
                File imagenSeleccionada = selector.getSelectedFile();
                img = ImageIO.read(imagenSeleccionada);
            } catch (IOException e){}
        }
        imagenActual = img;
        imagenModificada = img;
        return img;
        }
    
    //Método que guarda la imagen con el filtro aplicado.
    private void guardar(){
        if(imagenActual == null){
            JOptionPane.showMessageDialog(this, "Primero debe abrir una imágen.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else if(imagenModificada == null){
            JOptionPane.showMessageDialog(this, "Debes aplicar un filtro a la imagen para poder guardarla.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else{
            JFileChooser selector = new JFileChooser();
            selector.setDialogTitle("Guardar Imagen");
            FileNameExtensionFilter filtroImagen1 = new FileNameExtensionFilter(".jpg", "jpg");
            FileNameExtensionFilter filtroImagen2 = new FileNameExtensionFilter(".jpeg", "jpeg");
            FileNameExtensionFilter filtroImagen3 = new FileNameExtensionFilter(".png", "png");
            FileNameExtensionFilter filtroImagen4 = new FileNameExtensionFilter(".bmp", "bmp");
            selector.addChoosableFileFilter(filtroImagen1);
            selector.addChoosableFileFilter(filtroImagen2);
            selector.addChoosableFileFilter(filtroImagen3);
            selector.addChoosableFileFilter(filtroImagen4);
            if(selector.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                try{
                    String ext = selector.getFileFilter().getDescription();
                    File nA = selector.getSelectedFile();
                    String direccion = nA.getAbsolutePath()+ext;
                    File archivo = new File(direccion);
                    //System.out.println(archivo.toString());
                    ImageIO.write(imagenModificada, "png", archivo);
                    JOptionPane.showMessageDialog(this, "Archivo guardado correctamente.");
                } catch(IOException e){
                    System.err.println("No se pudo guardar el archivo");
                }
            }
        }        
    }
        
    //Método que toma la suma R+G+B y lo divide entre 3 para asignar el nuevo tono de gris.
    private BufferedImage grises1(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                mediaPixel = (int)((colorAux.getRed() + colorAux.getGreen() + colorAux.getBlue())/3);
                colorNuevo = (mediaPixel << 16) | (mediaPixel << 8) | mediaPixel;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Método que asigna pesos a cada componente R, G y B.
    private BufferedImage grises2(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                mediaPixel = (int)(((colorAux.getRed()*0.30) + (colorAux.getGreen()*0.59) + (colorAux.getBlue()*0.11)));
                colorNuevo = (mediaPixel << 16) | (mediaPixel << 8) | mediaPixel;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Método de Desaturación que toma el MAX(R,G,B)+MIN(R,G,B) y lo divide entre 2.
    private BufferedImage grises3(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                int rojo = (int) colorAux.getRed();
                int verde = (int) colorAux.getGreen();
                int azul = (int) colorAux.getBlue();
                int maximo = Math.max(Math.max(rojo,verde), azul);
                int minimo = Math.min(Math.min(rojo,verde), azul);
                mediaPixel = (int)((maximo+minimo)/2);
                colorNuevo = (mediaPixel << 16) | (mediaPixel << 8) | mediaPixel;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Método que toma la máxima descomposición, es decir MAX(R,G,B).
    private BufferedImage grises4(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                int rojo = (int) colorAux.getRed();
                int verde = (int) colorAux.getGreen();
                int azul = (int) colorAux.getBlue();
                int maximo = Math.max(Math.max(rojo,verde), azul);
                mediaPixel = (int)(maximo);
                colorNuevo = (mediaPixel << 16) | (mediaPixel << 8) | mediaPixel;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Método que toma la mínima descomposición, es decir MIN(R,G,B).
    private BufferedImage grises5(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                int rojo = (int) colorAux.getRed();
                int verde = (int) colorAux.getGreen();
                int azul = (int) colorAux.getBlue();
                int minimo = Math.min(Math.min(rojo,verde), azul);
                mediaPixel = (int)(minimo);
                colorNuevo = (mediaPixel << 16) | (mediaPixel << 8) | mediaPixel;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Método que asigna un valor RGB aleatorio a cada pixel.
    private BufferedImage azar(){
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                int rojo = (int) (Math.random()*256);
                int verde = (int) (Math.random()*256);
                int azul = (int) (Math.random()*256);
                colorNuevo = (rojo << 16) | (verde << 8) | azul;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Filtro que pone una mica ROJA.
    private BufferedImage rojo(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                int rojo = (int) (colorAux.getRed());
                colorNuevo = (rojo << 16) | (0 << 8) | 0;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Filtro que pone una mica VERDE.
    private BufferedImage verde(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));                
                int verde = (int) (colorAux.getGreen());
                colorNuevo = (0 << 16) | (verde << 8) | 0;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Filtro que pone una mica AZUL.
    private BufferedImage azul(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                int azul = (int) (colorAux.getBlue());
                colorNuevo = (0 << 16) | (0 << 8) | azul;
                imagenActual.setRGB(i, j, colorNuevo);
            }
        }
        return imagenActual;
    }
    
    //Método que pinta un pixel de negro si el promedio es mayor que 128.
    private BufferedImage inverso(){
         int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                mediaPixel = (int)((colorAux.getRed() + colorAux.getGreen() + colorAux.getBlue())/3);
                if(mediaPixel < 128){
                    colorNuevo = (255 << 16) | (255 << 8) | 255;
                    imagenActual.setRGB(i, j, colorNuevo);
                } else{
                    colorNuevo = (0 << 16) | (0 << 8) | 0;
                    imagenActual.setRGB(i, j, colorNuevo);
                }
            }
        }
        return imagenActual;
    }
    
    //Método que pinta un pixel de blanco si el promedio es mayor que 128.
    private BufferedImage altoContraste(){
        int mediaPixel;
        int colorNuevo;
        Color colorAux;
        for(int i = 0; i < imagenActual.getWidth(); i++){
            for(int j = 0; j < imagenActual.getHeight(); j++){
                colorAux = new Color(this.imagenActual.getRGB(i, j));
                mediaPixel = (int)((colorAux.getRed() + colorAux.getGreen() + colorAux.getBlue())/3);
                if(mediaPixel > 128){
                    colorNuevo = (255 << 16) | (255 << 8) | 255;
                    imagenActual.setRGB(i, j, colorNuevo);
                } else{
                    colorNuevo = (0 << 16) | (0 << 8) | 0;
                    imagenActual.setRGB(i, j, colorNuevo);
                }
            }
        }
        return imagenActual;
    }
    
    //Método que aplica el filtro de convolución sobre una imagen.
    private BufferedImage convolucion(double[][] matriz, double factor, double bias){
        BufferedImage aux = imagenActual;
        double r = 0, g = 0, b = 0;
        int rad = (matriz.length)/2;
        Color [][]original = new Color[aux.getWidth()][aux.getHeight()];
        for(int x = 0; x < aux.getWidth(); x++){
            for(int y = 0; y < aux.getHeight(); y++){
                original[x][y] = new Color(aux.getRGB(x, y));
            }
        }
        for(int x = 0; x < aux.getWidth(); x++){
            int xi = (x<rad) ? rad-x : 0;
            int xf = ((aux.getWidth()-x) <= rad) ? rad+aux.getWidth()-x : matriz.length;
            for(int y = 0; y < aux.getHeight(); y++, r = 0, g = 0, b = 0){
                int yi = (y<rad) ? rad-y : 0;
                int yf = ((aux.getHeight()-y) <= rad) ? rad+aux.getHeight()-y : matriz.length;
                for(int i = xi, px = x-rad; i<xf; i++){
                    for(int j = yi, py = y-rad; j<yf; j++){
                        double val = matriz[i][j];
                        r += (original[px+i][py+j].getRed()*val);
                        g += (original[px+i][py+j].getGreen()*val);
                        b += (original[px+i][py+j].getBlue()*val);
                    }
                }
                r = r*factor+bias;
                g = g*factor+bias;
                b = b*factor+bias;
                aux.setRGB(x, y, new Color(normaliza((int)r), normaliza((int)g), normaliza((int)b)).getRGB());
            }
        }       
        return aux;
    }
    
    //Método auxiliar para normalizar.
    private int normaliza(int n){
        return (n<0) ? 0 : ((n<256) ? n : 255);
    }
    
    //Filtro Blur.
    private BufferedImage blur(){
        double[][] matriz = {
            {0, 0, 1, 0, 0},
            {0, 1, 1, 1, 0},
            {1, 1, 1, 1, 1},
            {0, 1, 1, 1, 0},
            {0, 0, 1, 0, 0}
        };
        return convolucion(matriz, 1.0/13.0, 0);
    }
    
    //Filtro Motion Blur.
    private BufferedImage motionBlur(){
        double[][] matriz = new double[][]{
            {1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 1, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 1, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 1, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 1, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 1, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 1}
        };
        return convolucion(matriz, 1.0/9.0, 0);
    }
    
    //Filtro que encuentra bordes.
    public BufferedImage bordes(){
        double[][] matriz = new double[][]{
            {-1, -1, -1},
            {-1, 8, -1},
            {-1, -1, -1}
        };
        return convolucion(matriz, 1.0, 0);
    }
    
    //Filtro Sharpen.
    public BufferedImage sharpen(){
        double[][] matriz = new double[][]{
            {-1, -1, -1},
            {-1, 9, -1},
            {-1, -1, -1}
        };
        return convolucion(matriz, 1.0, 0);
    }
    
    //Filtro Emboss
    public BufferedImage emboss(){
        double[][] matriz = new double[][]{
            {-1, -1, -1, -1, 0},
            {-1, -1, -1, 0, 1},
            {-1, -1, 0, 1, 1},
            {-1, 0, 1, 1, 1},
            {0, 1, 1, 1, 1}
        };
        return convolucion(matriz, 1.0, 128.0);
    }
    
    //Filtros Promedio y Mediano
    public BufferedImage meanMedian(){
        double[][] matriz = new double[][]{
            {1, 1, 1},
            {1, 1, 1},
            {1, 1, 1}
        };
        return convolucion(matriz, 1.0/9.0, 0.0);
    }
        
    //Filtro de una imagen que aplica un mosaico de pixeles.
    public BufferedImage mosaico(int tamX, int tamY){
        BufferedImage resultado = imagenActual;
        int w = resultado.getWidth();
        int h = resultado.getHeight();
        int x = 0, y = 0;
        int r = 0, g = 0, b = 0;
        int m = 0, n = 0;
        while(x < w){
            m = ((x+tamX) < w) ? tamX : w-x;
            while(y < h){
                n = ((y + tamY) < h) ? tamY : h-y;
                for(int i = 0; i < m; i++){
                    for(int j = 0; j < n; j++){
                        Color c = new Color(resultado.getRGB(i+x, j+y));
                        r += c.getRed();
                        g += c.getGreen();
                        b += c.getBlue();
                    }
                }
                r /= (m*n);
                g /= (m*n);
                b /= (m*n);
                for(int i = 0; i < m; i++){
                    for(int j = 0; j < n; j++){
                        Color nuevo = new Color(r,g,b);
                        resultado.setRGB(i+x, j+y, nuevo.getRGB());
                    }
                }
                y += n;
                r = 0;
                g = 0;
                b = 0;
            }
            x += m;
            y = 0;
        }
        return resultado;
    }
    
    //Filtro que crea una imagen con la letra M en colores.
    public BufferedImage mColores(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        String letra = "M";
        aux = mosaico(2,2);
        try{
            String nombre = JOptionPane.showInputDialog("Ingrese el nombre para guardar la imagen en formato html");
            nombre += ".html";
            FileWriter iHTML = new FileWriter(nombre, false);
            BufferedWriter letras = new BufferedWriter(iHTML);
            for(int i = 0; i < h; i++){
                for(int j = 0; j < w; j++){
                    Color nuevo = new Color(aux.getRGB(j,i));
                    letras.write(escribeLinea(nuevo, 4, letra));
                }
                letras.write("<br>");
            }
            letras.close();
        }
        catch(IOException e){
            System.err.println("No se pudo crear el archivo");
        }
        return aux;
    }
    
    //Filtro que crea una imagen con la letra M en blanco y negro.
    public BufferedImage mBlancoNegro(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        String letra = "M";
        aux = grises1();
        aux = mosaico(2,2);
        try{
            String nombre = JOptionPane.showInputDialog("Ingrese el nombre para guardar la imagen en formato html");
            nombre += ".html";
            FileWriter iHTML = new FileWriter(nombre, false);
            BufferedWriter letras = new BufferedWriter(iHTML);
            for(int i = 0; i < h; i++){
                for(int j = 0; j < w; j++){
                    Color nuevo = new Color(aux.getRGB(j,i));
                    letras.write(escribeLinea(nuevo, 4, letra));
                }
                letras.write("<br>");
            }
            letras.close();
        }
        catch(IOException e){
            System.err.println("No se pudo crear el archivo");
        }
        return aux;
    }
    
    //Filtro que crea una imagen con letras dependiendo del color de la imagen.
    public BufferedImage letrasColores(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        aux = mosaico(2,2);
        try{
            String nombre = JOptionPane.showInputDialog("Ingrese el nombre para guardar la imagen en formato html");
            nombre += ".html";
            FileWriter iHTML = new FileWriter(nombre, false);
            BufferedWriter letras = new BufferedWriter(iHTML);
            letras.write("<pre>");
            for(int i = 0; i < h; i++){
                for(int j = 0; j < w; j++){
                    Color nuevo = new Color(aux.getRGB(j,i));
                    String letra = buscaLetra(nuevo);
                    letras.write(escribeLinea(nuevo, 4, letra));
                }
                letras.write("<br>");
            }
            letras.write("</pre>");
            letras.close();
        }
        catch(IOException e){
            System.err.println("No se pudo crear el archivo");
        }
        return aux;
    }
    
    //Filtro que crea una imagen con letras dependiendo del tono de gris de la imagen.
    public BufferedImage letrasBlancoNegro(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        aux = grises1();
        aux = mosaico(2,2);
        try{
            String nombre = JOptionPane.showInputDialog("Ingrese el nombre para guardar la imagen en formato html");
            nombre += ".html";
            FileWriter iHTML = new FileWriter(nombre, false);
            BufferedWriter letras = new BufferedWriter(iHTML);
            letras.write("<pre>");
            for(int i = 0; i < h; i++){
                for(int j = 0; j < w; j++){
                    Color nuevo = new Color(aux.getRGB(j,i));
                    String letra = buscaLetra(nuevo);
                    letras.write(escribeLinea(nuevo, 4, letra));
                }
                letras.write("<br>");
            }
            letras.write("</pre>");
            letras.close();
        }
        catch(IOException e){
            System.err.println("No se pudo crear el archivo");
        }
        return aux;
    }
    
    //Filtro para poner texto en una imagen.
    public BufferedImage textoImagen(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        aux = mosaico(2,2);
        try{
            String texto = JOptionPane.showInputDialog("Ingrese su texto por favor:");
            String[] palabras = texto.split(" ");
            ArrayList<Character> letra = new ArrayList<>();
            letra = obtenerLetras(palabras, letra);
            String nombre = JOptionPane.showInputDialog("Ingrese el nombre para guardar la imagen en formato html");
            nombre += ".html";
            FileWriter iHTML = new FileWriter(nombre, false);
            BufferedWriter letras = new BufferedWriter(iHTML);
            letras.write("<pre>");
            for(int i = 0; i < h; i++){
                for(int j = 0; j < w; j++){
                    Color nuevo = new Color(aux.getRGB(j,i));
                    int r = nuevo.getRed();
                    int g = nuevo.getGreen();
                    int b = nuevo.getBlue();
                    char simbolo = letra.remove(0);
                    letras.write("<font size=4 style=color:rgb("+r+","+g+","+b+");>"+simbolo+"</font>");
                    letra.add(simbolo);
                }
                letras.write("<br>");
            }
            letras.write("</pre>");
            letras.close();
            
        }
        catch(IOException e){
            System.err.println("No se pudo crear el archivo");
        }
        return aux;
    }
    
    //Método auxiliar para escribir en el HTML.
    public String escribeLinea(Color color, int tamFuente, String letra){
        int r = color.getRed();
        int g = color.getGreen();
        int b = color.getBlue();
        return "<font size="+tamFuente+" style=color:rgb("+r+","+g+","+b+");>"+letra+"</font>";
    }
   
    //Método auxiliar para encontrar la letra dependiendo del color.
    public String buscaLetra(Color color){
        int r = color.getRed();
        int g = color.getGreen();
        int b = color.getBlue();
        int promedio = (int)((r+g+b)/3);
        String letra = "";
        if(promedio < 16) letra = "M";
        else if(promedio > 15 && promedio < 32) letra = "N";
        else if(promedio > 31 && promedio < 48) letra = "H";
        else if(promedio > 47 && promedio < 64) letra = "#";
        else if(promedio > 63 && promedio < 80) letra = "Q";
        else if(promedio > 79 && promedio < 96) letra = "U";
        else if(promedio > 95 && promedio < 112) letra = "A";
        else if(promedio > 111 && promedio < 128) letra = "D";
        else if(promedio > 127 && promedio < 144) letra = "0";
        else if(promedio > 143 && promedio < 160) letra = "Y";
        else if(promedio > 159 && promedio < 176) letra = "2";
        else if(promedio > 175 && promedio < 192) letra = "$";
        else if(promedio > 191 && promedio < 210) letra = "%";
        else if(promedio > 209 && promedio < 226) letra = "+";
        else if(promedio > 225 && promedio < 240) letra = ".";
        else if(promedio > 239 && promedio < 256) letra = "&nbsp;";
        return letra;
    }
    
    //Método auxiliar para crear una lista con cada letra del texto.
    public ArrayList obtenerLetras(String[] palabras, ArrayList<Character> letras){
        for(String palabra : palabras){
            for(char letra : palabra.toCharArray()){
                letras.add(letra);                
            }
        }
        return letras;
    }
    
    //Filtro que aplica una marca de agua.
    public Image marcaAgua(){
        final int superiorI = 1;
        final int superiorD = 2;
        final int centro = 3;
        final int inferiorI = 4;
        final int inferiorD = 5;
        BufferedImage aux = imagenActual;
        Graphics2D imagen = (Graphics2D)aux.getGraphics();
        int w = aux.getWidth();
        int h = aux.getHeight();
        String marca = JOptionPane.showInputDialog("Ingrese su texto para poner la marca de agua:");
        int region = seleccionaPos();
        int tam = (w / marca.length()) / 2;
        Font fuente = new Font(Font.MONOSPACED, Font.PLAIN, tam);
        imagen.setFont(fuente);        
        imagen.setColor(seleccionaColor());
        switch(region){
            case superiorI:
                imagen.drawString(marca, 20, tam);
                break;
            case superiorD:
                imagen.drawString(marca, w-(tam*3), tam);
                break;
            case centro:
                imagen.drawString(marca, (w/2)-(tam), h/2);
                break;
            case inferiorI:
                imagen.drawString(marca, 20, h-tam);
                break;
            case inferiorD:
                imagen.drawString(marca, w-(tam*3), h-tam);
                break;
        }
        imagen.dispose();
        //BufferedImage marcaAgua = aux;
        imagen.drawImage(aux, null, 0, 0);
        return aux;
    }
    
    //Método para quitar una marca de agua de una imagen
    public BufferedImage quitarMarcaAgua(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        for(int i = 0; i < w; i++){
            for(int j = 0; j < h; j++){
                Color color = new Color(aux.getRGB(i,j));
                int r = color.getRed();
                int g = color.getGreen();
                int b = color.getBlue();
                int rg = Math.abs(r-g);
                if(rg < 10){
                    continue;
                }
                else{
                    int promedio = (int)(r+g+b)/3;
                    promedio = Math.max(0, Math.min(255, promedio));
                    r = (promedio > 190) ? (promedio+60) : ((promedio > 90 && promedio < 191) ? (promedio+25) : promedio-30);
                    r = Math.max(0, Math.min(255, r));
                    g = b = r;
                }
                color = new Color(r, g, b);
                aux.setRGB(i, j, color.getRGB());
            }
        }
        return aux;        
    }
    
    //Métodoo auxiliar para seleccionar el color de fuente de la marca de agua.
    public Color seleccionaColor(){
        Color color = Color.LIGHT_GRAY;
        String mensaje = "Por favor ingresa el número de uno de los siguientes colores para poner tu marca de agua:\n"
                + "1. Rojo\n"
                + "2. Verde\n"
                + "3. Azul\n"
                + "4. Negro\n"
                + "5. Blanco\n"
                + "6. Cyan\n"
                + "7. Magenta\n"
                + "8. Naranja\n"
                + "9. Rosa\n"
                + "10. Amarillo\n"
                + "Ejemplo: Para que el color de la marca de agua sea amarillo se ingresa el número: 10";
        String s = JOptionPane.showInputDialog(mensaje);
        int opcion = Integer.parseInt(s);
        while(opcion< 1 || opcion > 10){
            JOptionPane.showMessageDialog(this, "Por favor seleccione una opción valida", "ERROR", JOptionPane.ERROR_MESSAGE);
             color = seleccionaColor();
            break;
        }
        switch(s){
            case "1":
                color = Color.RED;
                break;
            case "2":
                color = Color.GREEN;
                break;
            case "3":
                color = Color.BLUE;
                break;
            case "4":
                color = Color.BLACK;
                break;
            case "5":
                color = Color.WHITE;
                break;
            case "6":
                color = Color.CYAN;
                break;
            case "7":
                color = Color.MAGENTA;
                break;
            case "8":
                color = Color.YELLOW;
                break;
            case "9":
                color = Color.PINK;
                break;
            case "10":
                color = Color.YELLOW;
                break;
            }
        color = new Color(color.getRed(), color.getGreen(), color.getBlue(), 140);
        return color;
    }
    
    //Métodoo auxiliar para seleccionar el color de fuente de la marca de agua.
    public int seleccionaPos(){
        String region = JOptionPane.showInputDialog("Ingrese el número de la posición donde desea colocar la marca de agua:\n"
                + "1. Superior Izquierda\n"
                + "2. Superior Derecha\n"
                + "3. Centro\n"
                + "4. Inferior Izquierda\n"
                + "5. Inferior Derecha\n"
                + "Ejemplo: Para colocar la marca de agua en la posición superior derecha se ingresa el número: 2");
        int pos = Integer.parseInt(region);
        while(pos < 1 || pos > 5){
            JOptionPane.showMessageDialog(this, "Por favor seleccione una opción valida", "ERROR", JOptionPane.ERROR_MESSAGE);
            pos = seleccionaPos();
            break;
        }
        return pos;
    }
    
    //Filtro que aplica una reducción a la imagen.
    public BufferedImage reduccion(){
        BufferedImage aux = imagenActual;
        String x = JOptionPane.showInputDialog("Ingrese el porcentaje a reducir en la coordenada X:\n"
                + "Nota: Debe ser un valor entre 0 y 100.");
        String y = JOptionPane.showInputDialog("Ingrese el porcentaje a reducir en la coordenada Y:\n"
                + "Nota: Debe ser un valor entre 0 y 100");
        x = "0."+x;
        y = "0."+y;
        float sX = Float.parseFloat(x);
        float sY = Float.parseFloat(y);
        int w = aux.getWidth();
        int h = aux.getHeight();
        for(int i = 0; i < w; i++){
            for(int j = 0; j < h;  j++){
                int sXi = (int)(i * sX);
                int sYj = (int)(j * sY);
                Color color = new Color(imagenActual.getRGB(i,j));
                aux.setRGB(sXi, sYj, color.getRGB());
            }
        }
        int wX = ((int)((w*sX)+1) < w) ? (int)((w*sX)+1) : w;
        int hY = ((int)((h*sY)+1) < h) ? (int)((h*sY)+1) : h;
        aux = pintaFondo(aux, wX, 0);
        aux = pintaFondo(aux, 0, hY);
        aux = pintaFondo(aux, wX, hY);
        return aux;
    }
    
    //Filtro que aplica la reducción mediante el mosaico.
    public BufferedImage reduccionMosaico(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        double escala = escalaMosaico();
        int wMosaico = (int) Math.round(w/escala);
        int hMosaico = (int) Math.round(h/escala);
        aux = mosaico(wMosaico, hMosaico);
        for(int i=0, posI=0; i < w; i+=wMosaico,posI++){
            for(int j=0, posJ=0; j < h; j+=hMosaico,posJ++){
                Color mosaico = new Color(aux.getRGB(i,j));
                aux.setRGB(posI, posJ, mosaico.getRGB());
            }
        }
        aux = pintaFondo(aux, encuentraLimite(wMosaico, w), 0);
        aux = pintaFondo(aux, 0, encuentraLimite(hMosaico, h));
        aux = pintaFondo(aux, encuentraLimite(wMosaico,w), encuentraLimite(hMosaico,h));
        return aux;
    }
    
    //Método auxiliar para seleccionar la escala en la que se hará la reducción mosaico.
    public double escalaMosaico(){
        String opciones = JOptionPane.showInputDialog("Por favor seleccione el número de una de las siguientes escalas\n"
                + "para aplicar a el mosaico y posteriormente hacer la reducción:\n"
                + "1. 16x16\n"
                + "2. 24x24\n"
                + "3. 32x32\n"
                + "4. 48x48\n"
                + "5. 64x64\n"
                + "Ejemplo: Para seleccionar la escala 48x48 se ingresa el número: 4");
        int eleccion = Integer.parseInt(opciones);
        double escala = 0;
        while(eleccion < 1 || eleccion > 5){
            JOptionPane.showMessageDialog(this, "Por favor seleccione una opción valida", "ERROR", JOptionPane.ERROR_MESSAGE);
            eleccion = (int) escalaMosaico();
            break;
        }
        switch(eleccion){
            case 1:
                escala = 16.0;
                break;
            case 2:
                escala = 24.0;
                break;
            case 3:
                escala = 32.0;
                break;
            case 4:
                escala = 48.0;
                break;
            case 5:
                escala = 64.0;
                break;
        }                    
        return escala;
    }
    
    //Método auxiliar para pintar el fondo de blanco de la imagen escalada.
    public BufferedImage pintaFondo(BufferedImage imagen, int x, int y){
        for(int i = x; i < imagen.getWidth(); i++){
            for(int j = y; j < imagen.getHeight(); j++){
                imagen.setRGB(i, j, Color.WHITE.getRGB());
            }
            
        }
        return imagen;
    }
    
    //Método auxiliar para obtener el límite de una reducción mosaico.
    public int encuentraLimite(int tamMosaico, int lado){
        int limite = 0;
        for(int i=0; i < lado; i+=tamMosaico){
            limite+=1;
        }
        return limite;
    }
    
    //Filtro óleo(acuarela) en tonos de grises.
    public BufferedImage oleoTonosGrises(){
        int w = imagenActual.getWidth();
        int h = imagenActual.getHeight();
        BufferedImage aux = imagenActual;
        aux = grises1();
        aux = oleo();
        return aux;
    }
    
    //Filtro óleo (acuarela) en color.
    public BufferedImage oleo(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        int tamMatriz = tamMatriz();
        for(int i = 0; i < w; i++){
            for(int j = 0; j < h; j++){
                int[] frecuencias = new int[tamMatriz*tamMatriz];
                int[] rojo = new int[tamMatriz*tamMatriz];
                int[] verde = new int[tamMatriz*tamMatriz];
                int[] azul = new int[tamMatriz*tamMatriz];
                for(int gridY = 0; gridY < tamMatriz; gridY++){
                    for(int gridX = 0; gridX < tamMatriz; gridX++){
                        int posX = (int)((i-(tamMatriz/2)+gridX+w)%w);
                        int posY = (int)((j-(tamMatriz/2)+gridY+h)%h);
                        Color original = new Color(imagenActual.getRGB(posX,posY));
                        int r = original.getRed();
                        int g = original.getGreen();
                        int b = original.getBlue();
                        int intensidad = (int)Math.floor((((r+g+b)/3)*(tamMatriz*tamMatriz))/255);
                        if(intensidad == tamMatriz*tamMatriz){
                            intensidad = (tamMatriz*tamMatriz)-1;
                        }
                        frecuencias[intensidad] += 1;
                        rojo[intensidad] += r;
                        verde[intensidad] += g;
                        azul[intensidad] += b;
                    }
                }
                int masFrecuente = masFrecuente(frecuencias);
                int maxFrecuente = frecuencias[masFrecuente];
                int r = rojo[masFrecuente]/maxFrecuente;
                int g = verde[masFrecuente]/maxFrecuente;
                int b = azul[masFrecuente]/maxFrecuente;
                Color nuevo = new Color(r,g,b);
                aux.setRGB(i,j,nuevo.getRGB());
            }
        }
        return aux;        
    }
    
    //Método auxiliar para determinar el tamaño de la matriz.
    public int tamMatriz(){
        String opciones = JOptionPane.showInputDialog("Por favor seleccione el número de la matriz\n"
                + "para realizar el filtro óleo:\n"
                + "1. 3x3\n"
                + "2. 6x6\n"
                + "Ejemplo: Para una matriz de 6x6 se ingresa el número: 2\n"
                + "NOTA: De momento sólo funciona con matrices de 3x3");
        int eleccion = Integer.parseInt(opciones);
        while(eleccion < 1 || eleccion > 5){
            JOptionPane.showMessageDialog(this, "Por favor seleccione una opción valida", "ERROR", JOptionPane.ERROR_MESSAGE);
            eleccion = (int) tamMatriz();
            break;
        }
        int tamaño = 0;
        switch(eleccion){
            case 1:
                tamaño = 3;
                break;
            case 2:
                tamaño = 6;
                break;
        }                    
        return tamaño;
    }
    
    //Método auxiliar para encontrar el elemento de más frecuencia en un arreglo.
    public int masFrecuente(int[] arreglo){
        if(arreglo.length == 0){
            return -1;
        }
        int frecuente = 0;
        for(int i = 0; i < arreglo.length; i++){
            if(arreglo[i] > arreglo[frecuente]){
                frecuente = i;
            }
        }
        return frecuente;
    }
    
    //Filtro histograma.
    public BufferedImage histograma(){
        BufferedImage aux = imagenActual;
        aux = grises1();
        int w = aux.getWidth();
        int h = aux.getHeight();
        int[] histograma = new int[256];
        for(int i = 0; i < w; i++){
            for(int j = 0; j < h; j++){
                Color color = new Color(aux.getRGB(i, j));
                int gris = color.getRed();
                histograma[gris]++;
                
            }
        }
        int[] cdf = new int[256];
        cdf[0] = histograma[0];
        for(int i = 1; i < 256; i++){
            cdf[i] = cdf[i-1] + histograma[i];
        }
        int[] nuevoColor = new int[256];
        for(int i = 0; i < 256; i++){
            nuevoColor[i] = histoEq(cdf[i], 0, w, h);
        }
        for(int i = 0; i < w; i++){
            for(int j = 0; j < h; j ++){
                Color color = new Color(aux.getRGB(i, j));
                int gris = color.getRed();
                int nC = nuevoColor[gris];
                Color nuevo = new Color(nC, nC, nC);
                aux.setRGB(i, j, nuevo.getRGB());
            }
        }
        return aux;
    }
    
    //Método auxiliar para calcular el valor del pixel en el histograma.
    public int histoEq(int cdf, int cdfmin, int w, int h){
        double valor = cdf-cdfmin;
        valor /= ((w*h)-cdfmin);
        valor *= (256-1);
        valor = Math.round(valor);
        return (int)valor;
    }
        
    //Método auxiliar para pedir el mensaje a esconder.
    public String pedirMensaje(int w, int h){
        String mensaje = JOptionPane.showInputDialog("Ingrese el texto a encriptar.\n"
                + "Máximo de texto: " + w*h + " caracteres.");
        while(mensaje.length() >= (w*h)/3){
            JOptionPane.showMessageDialog(this, "Por favor ingrese un texto de longitud válida", "ERROR", JOptionPane.ERROR_MESSAGE);
            mensaje = pedirMensaje(w,h);
        }
        return mensaje;
    }
    
    //Filtro Sepia para imagenes en tonos de grises.
    public BufferedImage sepia(){
        BufferedImage aux = imagenActual;
        int w = aux.getWidth();
        int h = aux.getHeight();
        aux = grises1();
        int efecto = cantidadSepia();
        for(int i = 0; i < w; i++){
            for(int j = 0; j < h; j++){
                Color actual = new Color(aux.getRGB(i, j));
                int r = actual.getRed();
                int g = actual.getGreen();
                int b = actual.getBlue();
                int nr = r + (efecto*2);
                int ng = g + efecto;
                if(nr <= (efecto*2)-1 || nr > 255){
                    nr = 255;
                }
                if(ng <= (efecto-1) || ng > 255){
                    ng = 255;
                }
                Color nuevo = new Color(nr, ng, b);
                aux.setRGB(i, j, nuevo.getRGB());
            }
        }
        return aux;
    }
    
    //Método auxiliar para pedir el la cantidad de efecto sepia.
    public int cantidadSepia(){
    String opciones = JOptionPane.showInputDialog("Por favor ingrese la cantidad de efecto sepia entre 0-255\n"
            + "Ejemplo: Para una cantidad pequeña de efecto se ingresa el número: 30");
        int eleccion = Integer.parseInt(opciones);
        while(eleccion < 0 || eleccion > 2555){
            JOptionPane.showMessageDialog(this, "Por favor seleccione un número valida", "ERROR", JOptionPane.ERROR_MESSAGE);
            eleccion = (int) cantidadSepia();
            break;
        }       
        return eleccion;
    }
    
    /* Método auxiliar para pedir el método de la distancia entre las imágenes
     * y encontrar el óptimo.
     */
    public String distanciaImagenes(){
        String metodo;
        String opciones = JOptionPane.showInputDialog("Por favor ingrese el número del método para calcula\n"
                + "la distancia y encontrar la imagen óptima en el fotomosaico\n"
                + "1. Distancia Euclidiana\n"
                + "2. Distancia Riemersma\n"
                + "Ejemplo: Para seleccionar la distancia Euclidiana se ingresa el número: 1");
        int elegido = Integer.parseInt(opciones);
        while(elegido < 1 || elegido > 2){
            JOptionPane.showMessageDialog(this, "Por favor seleccione una opción valida", "ERROR", JOptionPane.ERROR_MESSAGE);
            metodo = distanciaImagenes();
            break;
        }
        if(elegido == 1){
            metodo = "Euclidiana";
        } else{
            metodo = "Riemersman";
        }
        return metodo;
    }
    
    //Método auxiliar para seleccionar una biblioteca existente o crear una nueva.
    public int opcionesBiblioteca(){
        String opciones = JOptionPane.showInputDialog("Por favor ingrese el número de una de las opciones siguientes\n"
                + "para seleccionar una biblioteca existente o crear una nueva con imágenes personalizadas\n"
                + "1. Crear Biblioteca\n"
                + "2. Seleccionar Biblioteca Existente\n"
                + "Ejemplo: Para seleccionar una bibliotea existente se ingresa el número: 2");
        int elegido = Integer.parseInt(opciones);
        while(elegido < 1 || elegido > 2){
            JOptionPane.showMessageDialog(this, "Por favor seleccione una opción valida", "ERROR", JOptionPane.ERROR_MESSAGE);
            elegido = opcionesBiblioteca();
            break;
        }
        return elegido;
    }
}